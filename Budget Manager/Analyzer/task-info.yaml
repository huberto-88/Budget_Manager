type: edu
custom_name: stage5
files:
- name: src/budget/Main.java
  visible: true
  text: |
    package budget;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/BudgetManagerTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.File;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BudgetManagerTest extends StageTest<String> {


        @Override
        public List<TestCase<String>> generate() {
            return List.of(

                    new TestCase<String>()
                            .setInput("0\n")
                            .setCheckFunc(BudgetManagerTest::test1),

                    new TestCase<String>()
                            .setInput("0\n")
                            .setCheckFunc(BudgetManagerTest::test2),

                    new TestCase<String>()
                            .setInput("4\n0")
                            .setCheckFunc(BudgetManagerTest::test3),

                    new TestCase<String>()
                            .setInput("1\n400\n4\n1\n200\n4\n0")
                            .setCheckFunc(BudgetManagerTest::test4),

                    new TestCase<String>()
                            .setInput("1\n1000\n2\n" +
                                    "1\nAlmond 250g\n35.43\n" +
                                    "1\nMilk\n3.50\n" +
                                    "1\nRed Fuji Apple\n5.99\n" +
                                    "1\nEggs\n3.99\n" +
                                    "1\nFIJI Natural Artesian Water\n25.98\n" +
                                    "1\nHershey's milk chocolate bars\n8.54\n" +
                                    "1\nGreat Value Broccoli Florets\n1.00\n" +
                                    "1\nKeystone Ground Bee\n6.28\n" +
                                    "2\nGildan LT\n8.61\n" +
                                    "2\nMen's Dual Defense Crew Socks 12 Pairs\n13.00\n" +
                                    "2\nWrangler Men's Stretch Cargo Pant\n19.97\n" +
                                    "3\nLEGO DUPLO Town Farm Animals\n10.10\n" +
                                    "3\nCinema\n8.73\n" +
                                    "3\nSkate rental\n30\n" +
                                    "4\nSensodyne Pronamel Toothpaste\n19.74\n" +
                                    "4\nChick-fil-A $10 Gift Card\n10\n" +
                                    "4\nDebt\n3.50\n" +
                                    "5\n5\n0")
                            .setCheckFunc(BudgetManagerTest::test5),

                    new TestCase<String>()
                            .setInput("6\n4\n3\n5\n1\n6\n0")
                            .setCheckFunc(BudgetManagerTest::test6),

                    new TestCase<String>()
                            .setInput("7\n1\n2\n3\n4\n4\n6\n7\n1\n2\n3\n1\n4\n0")
                            .setCheckFunc(BudgetManagerTest::test7)
            );
        }


        //Checking program stop
        private static CheckResult test1(String reply, String attach) {
            if (!reply.contains("Bye!")) {
                return new CheckResult(false,
                        "Your program should stop after choosing \"Exit\"");
            }
            return new CheckResult(true);
        }


        //Checking menu
        private static CheckResult test2(String reply, String attach) {
            String[] menuPatterns = {"1)", "2)", "3)", "4)", "0)"};
            for (String menuPattern : menuPatterns) {
                if (!reply.contains(menuPattern)) {
                    return new CheckResult(false,
                            "Your menu doesn't have item " + menuPattern);
                }
            }
            return new CheckResult(true);
        }


        //Checking balance
        private static CheckResult test3(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 4) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 4\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balance = blocks[1];

            if (!balance.toLowerCase().contains("balance")) {
                return new CheckResult(false,
                        "Your program should show balance after choosing 4th item");
            }

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(balance);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Your balance should contain a number!");
            }

            double balanceDouble = Double.parseDouble(matcher.group());

            if (Math.abs(balanceDouble - 0) > 0.0001) {
                System.out.println(balance);
                return new CheckResult(false,
                        "Balance should be $0.00 at the beginning");
            }

            return new CheckResult(true);
        }


        //Checking adding income
        private static CheckResult test4(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 10) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 10\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterFirstAddingIncome = blocks[3];

            if (!balanceAfterFirstAddingIncome.contains("$400")) {
                return new CheckResult(false,
                        "Balance is wrong after adding income!.\n" +
                                "Expected:\n" +
                                "Balance: $400.00\n" +
                                "Your output:\n" +
                                balanceAfterFirstAddingIncome);
            }

            return new CheckResult(true);
        }

        //Checking the saving purchases
        private static CheckResult test5(String reply, String attach) {
            File file = new File("purchases.txt");
            if (!file.exists()) {
                return new CheckResult(false,
                        "Your program should create purchase.txt file and save purchases there!");
            }
            return new CheckResult(true);
        }

        //Checking the downloading purchases
        private static CheckResult test6(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 12) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 12\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterDownloadingPurchases = blocks[3];

            if (!balanceAfterDownloadingPurchases.replace(",", ".").contains("785.64")) {
                return new CheckResult(false,
                        "Your program reads balance from file wrong!");
            }

            //All purchases list

            String allPurchases = blocks[6];

            String[] expectedPurchases = {
                    "Almond 250g $35.43",
                    "Milk $3.50",
                    "Red Fuji Apple $5.99",
                    "Eggs $3.99",
                    "FIJI Natural Artesian Water $25.98",
                    "Hershey's milk chocolate bars $8.54",
                    "Great Value Broccoli Florets $1.00",
                    "Keystone Ground Bee $6.28",
                    "Gildan LT $8.61",
                    "Men's Dual Defense Crew Socks 12 Pairs $13.00",
                    "Wrangler Men's Stretch Cargo Pant $19.97",
                    "LEGO DUPLO Town Farm Animals $10.10",
                    "Cinema $8.73",
                    "Skate rental $30.00",
                    "Sensodyne Pronamel Toothpaste $19.74",
                    "Chick-fil-A $10 Gift Card $10.00",
                    "Debt $3.50"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!allPurchases.contains(expectedPurchase)) {
                    return new CheckResult(false,
                            "Your all purchases list doesn't have purchase:\n" +
                                    expectedPurchase + "\n" +
                                    "But should have!");
                }
            }

            String[] temp = allPurchases.split("\n");
            String totalSum = temp[temp.length - 1];

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Total sum of all purchases is wrong. Expected:\n" +
                                "Total sum: $214.36\n" +
                                "Your output:\n" +
                                totalSum);
            }

            double allTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(allTotalSum - 214.36) > 0.0001) {
                return new CheckResult(false,
                        "Your all total sum is wrong!");
            }

            //Food list

            String foodList = blocks[8];

            expectedPurchases = new String[]{
                    "Almond 250g $35.43",
                    "Milk $3.50",
                    "Red Fuji Apple $5.99",
                    "Eggs $3.99",
                    "FIJI Natural Artesian Water $25.98",
                    "Hershey's milk chocolate bars $8.54",
                    "Great Value Broccoli Florets $1.00",
                    "Keystone Ground Bee $6.28"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!foodList.contains(expectedPurchase)) {
                    return new CheckResult(false,
                            "Your food list doesn't have purchase:\n" +
                                    expectedPurchase + "\n" +
                                    "But should have!");
                }
            }

            temp = foodList.split("\n");
            totalSum = temp[temp.length - 1];

            matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Total sum of food list is wrong. Expected:\n" +
                                "Total sum: $90.71\n" +
                                "Your output:\n" + totalSum);
            }

            double foodTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(foodTotalSum - 90.71) > 0.0001) {
                return new CheckResult(false,
                        "Your food total sum is wrong!");
            }

            return new CheckResult(true);
        }


        //Sorting check
        private static CheckResult test7(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 22) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 22\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String sortEmptyAllPurchases = blocks[2];

            if (!sortEmptyAllPurchases.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort all purchases\" item shouldn't work if there are no purchases in the list.\n" +
                                "You should print 'List is empty!'");
            }

            String sortByEmptyType = blocks[4];

            if (sortByEmptyType.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort by type\" item should work even if there are no purchases in the list\n" +
                                "You should print each category with total sum $0\n" +
                                "Your output shouldn't contain 'List is empty!'");
            }

            String sortEmptyCertainType = blocks[7];

            if (!sortEmptyCertainType.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort certain type\" item shouldn't work if there are no purchases in the certain list\n" +
                                "You should print 'List is empty'");
            }

            String allSorted = blocks[13];
            String rightSorted = "Almond 250g $35.43\n" +
                    "Skate rental $30.00\n" +
                    "FIJI Natural Artesian Water $25.98\n" +
                    "Wrangler Men's Stretch Cargo Pant $19.97\n" +
                    "Sensodyne Pronamel Toothpaste $19.74\n" +
                    "Men's Dual Defense Crew Socks 12 Pairs $13.00\n" +
                    "LEGO DUPLO Town Farm Animals $10.10\n" +
                    "Chick-fil-A $10 Gift Card $10.00\n" +
                    "Cinema $8.73\n" +
                    "Gildan LT $8.61\n" +
                    "Hershey's milk chocolate bars $8.54\n" +
                    "Keystone Ground Bee $6.28\n" +
                    "Red Fuji Apple $5.99\n" +
                    "Eggs $3.99\n" +
                    "Milk $3.50\n" +
                    "Debt $3.50\n" +
                    "Great Value Broccoli Florets $1.00";

            if (!allSorted.contains(rightSorted)) {
                return new CheckResult(false,
                        "Your program sort all purchases wrong!\n" +
                                "Expected:\n" +
                                rightSorted + "\n" +
                                "Your output:\n" +
                                allSorted);
            }


            String sortedByType = blocks[15];
            String rightSortedByType = "Food - $90.71\n" +
                    "Entertainment - $48.83\n" +
                    "Clothes - $41.58\n" +
                    "Other - $33.24";

            if (!sortedByType.contains(rightSortedByType)) {
                return new CheckResult(false,
                        "Your program sort by type wrong!\n" +
                                "Expected:\n" +
                                rightSortedByType + "\n" +
                                "Your output:\n" +
                                sortedByType);
            }

            String sortedCertainType = blocks[18];
            String rightSortedCertainType = "Almond 250g $35.43\n" +
                    "FIJI Natural Artesian Water $25.98\n" +
                    "Hershey's milk chocolate bars $8.54\n" +
                    "Keystone Ground Bee $6.28\n" +
                    "Red Fuji Apple $5.99\n" +
                    "Eggs $3.99\n" +
                    "Milk $3.50\n" +
                    "Great Value Broccoli Florets $1.00";

            if (!sortedCertainType.contains(rightSortedCertainType)) {
                return new CheckResult(false,
                        "Your program sort certain type wrong!\n" +
                                "Expected:\n" +
                                rightSortedCertainType + "\n" +
                                "Your output:\n" +
                                sortedCertainType);
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/budget/BudgetManager.java
  visible: true
  text: |
    package budget;

    import java.io.*;
    import java.util.Scanner;

    public class BudgetManager {
        private final Scanner scanner = new Scanner(System.in);
        private Budget budget = new Budget();

        private void displayMenu() {
            System.out.println("\nChoose your action:\n" +
                    "1) Add income\n" +
                    "2) Add purchase\n" +
                    "3) Show list of purchases\n" +
                    "4) Balance\n" +
                    "5) Save\n" +
                    "6) Load\n" +
                    "0) Exit");
        }

        public void runApp() {
            while (true) {
                displayMenu();

                int request = Integer.parseInt(scanner.nextLine());
                System.out.println();
                switch (request) {
                    case 1:
                        addIncome();
                        break;
                    case 2:
                        addPurchase();
                        break;
                    case 3:
                        showListOfPurchases();
                        break;
                    case 4:
                        balance();
                        break;
                    case 5:
                        save();
                        break;
                    case 6:
                        this.budget = load();
                        break;
                    case 0:
                        closeApp();
                }
            }
        }

        private void addIncome() {
            System.out.println("Enter income:");
            budget.addIncome(Double.parseDouble(scanner.nextLine()));
            System.out.println("Income was added!");
            System.out.println();
        }

        private void addPurchase() {
            while (true) {
                String type = purchasesMenu("addPurchases");
                if (type.equals("back")) {
                    return;
                } else {
                    System.out.println();
                    System.out.println("Enter purchase name:");
                    String name = scanner.nextLine();
                    System.out.println("Enter its price:");
                    double price = Double.parseDouble(scanner.nextLine());
                    budget.addPurchase(type, new Purchase(name, price));
                    System.out.println("Purchase was added!");
                }
            }
        }

        private void showListOfPurchases() {
            while (true) {
                String type = purchasesMenu("showPurchases");
                if (type.equals("back")) {
                    return;
                }
                System.out.println();
                System.out.println(type);
                if (budget.getPurchases(type).isEmpty()) {
                    System.out.println("The purchase list is empty!");
                } else {
                    double sum = 0.0;
                    for (Purchase purchase : budget.getPurchases(type)) {
                        System.out.printf("%s $%.2f\n", purchase.getName(), purchase.getPrice());
                        sum += purchase.getPrice();
                    }
                    System.out.printf("Total sum $%.2f\n", sum);
                    System.out.println();
                }
            }
        }

        private void balance() {
            System.out.printf("Balance: $%.2f\n\n", budget.getBalance());
        }

        private String purchasesMenu(String action) {
            System.out.println();
            System.out.println("Choose the type of purchase\n" +
                    "1) Food\n" +
                    "2) Clothes\n" +
                    "3) Entertainment\n" +
                    "4) Other\n" +
                    "5) All\n" +
                    "6) Back");
            int choose = Integer.parseInt(scanner.nextLine());
            switch (choose) {
                case 1:
                    return "Food";
                case 2:
                    return "Clothes";
                case 3:
                    return "Entertainment";
                case 4:
                    return "Other";
                case 5:
                    return action.equals("addPurchases") ? "back" : "All";
                case 6:
                    return "back";
                case 0:
                    closeApp();
            }
            return "";
        }

        private void closeApp() {
            System.out.println("Bye!");
            System.exit(0);
        }

        private void save() {
            try (
                    FileOutputStream fos = new FileOutputStream("purchases.txt");
                    BufferedOutputStream bos = new BufferedOutputStream(fos);
                    ObjectOutputStream oos = new ObjectOutputStream(bos)) {
                oos.writeObject(budget);
            } catch (IOException exception) {
                exception.printStackTrace();
            }
        }

        private Budget load() {
            try (
                    FileInputStream fis = new FileInputStream("purchases.txt");
                    BufferedInputStream bis = new BufferedInputStream(fis);
                    ObjectInputStream ois = new ObjectInputStream(bis)) {
                System.out.println("Purchases were loaded!");
                return budget = (Budget) ois.readObject();
            } catch (IOException | ClassNotFoundException fileNotFoundException) {
                return new Budget();
            }
        }
    }
  learner_created: true
- name: purchases.txt
  visible: true
  text: "��\0\x05sr\0\nbudget.Budget\0\0\0\0\0\0\0\x01\x02\0\x02D\0\abalanceL\0\t\
    purchasest\0\x0fLjava/util/Map;xp@��\x1e�Q�sr\0\x11java.util.HashMap\x05\a���\x16\
    `�\x03\0\x02F\0\nloadFactorI\0\tthresholdxp?@\0\0\0\0\0\fw\b\0\0\0\x10\0\0\0\x04\
    t\0\nEntertainmentsr\0\x13java.util.ArrayListx��\x1d��a�\x03\0\x01I\0\x04sizexp\0\
    \0\0\x03w\x04\0\0\0\x03sr\0\x0fbudget.Purchase\0\0\0\0\0\0\0\x01\x02\0\x02D\0\x05\
    priceL\0\x04namet\0\x12Ljava/lang/String;xp@$333333t\0\x1cLEGO DUPLO Town Farm\
    \ Animalssq\0~\0\b@!u\x8f\\(�t\0\x06Cinemasq\0~\0\b@>\0\0\0\0\0\0t\0\fSkate rentalxt\0\
    \aClothessq\0~\0\x06\0\0\0\x03w\x04\0\0\0\x03sq\0~\0\b@!8Q�\x1e�t\0\tGildan LTsq\0\
    ~\0\b@*\0\0\0\0\0\0t\0&Men's Dual Defense Crew Socks 12 Pairssq\0~\0\b@3�Q�\x1e\
    �t\0!Wrangler Men's Stretch Cargo Pantxt\0\x04Foodsq\0~\0\x06\0\0\0\bw\x04\0\0\
    \0\bsq\0~\0\b@A�\n=p��t\0\vAlmond 250gsq\0~\0\b@\f\0\0\0\0\0\0t\0\x04Milksq\0\
    ~\0\b@\x17�\x8f\\(�t\0\x0eRed Fuji Applesq\0~\0\b@\x0f�\x1e�Q�t\0\x04Eggssq\0\
    ~\0\b@9��G�\x14{t\0\eFIJI Natural Artesian Watersq\0~\0\b@!\x14z�G�\x14t\0\x1d\
    Hershey's milk chocolate barssq\0~\0\b?�\0\0\0\0\0\0t\0\x1cGreat Value Broccoli\
    \ Floretssq\0~\0\b@\x19\x1e�Q�\x1ft\0\x13Keystone Ground Beext\0\x05Othersq\0\
    ~\0\x06\0\0\0\x03w\x04\0\0\0\x03sq\0~\0\b@3�p��\n=t\0\x1dSensodyne Pronamel Toothpastesq\0\
    ~\0\b@$\0\0\0\0\0\0t\0\x19Chick-fil-A $10 Gift Cardsq\0~\0\b@\f\0\0\0\0\0\0t\0\
    \x04Debtxx"
  learner_created: true
- name: src/budget/Budget.java
  visible: true
  text: |-
    package budget;

    import java.io.Serializable;
    import java.util.*;

    public class Budget implements Serializable {
        private static final long serialVersionUID = 1L;
        private double balance;
        private final Map<String, List<Purchase>> purchases = new HashMap<>();

        public double getBalance() {
            return balance;
        }

        public void addIncome(double income) {
            this.balance += income;
        }

        public List<Purchase> getPurchases(String type) {
            if (purchases.containsKey(type)) {
                return purchases.get(type);
            } else if (type.equals("All")) {
                List<Purchase> tempList = new ArrayList<>();
                for (List<Purchase> list : purchases.values()) {
                    tempList.addAll(list);
                }
                return tempList;
            }
            return Collections.emptyList();
        }

        public void addPurchase(String category, Purchase purchase) {
            if (purchases.containsKey(category)) {
                purchases.get(category).add(purchase);
            } else {
                purchases.put(category, new ArrayList<>());
                purchases.get(category).add(purchase);
            }
            balance -= purchase.getPrice();
        }
    }
  learner_created: true
- name: src/budget/Purchase.java
  visible: true
  text: |
    package budget;

    import java.io.Serializable;

    public class Purchase implements Serializable {
        private static final long serialVersionUID = 1L;
        private final String name;
        private final double price;

        public Purchase(String name, double price) {
            this.name = name;
            this.price = price;
        }

        public String getName() {
            return name;
        }

        public double getPrice() {
            return price;
        }

        @Override
                public String toString() {

            return String.format("%s $%f2", name, price);
        }
    }
  learner_created: true
- name: src/budget/Analyzer.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/76/stages/425/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sat, 30 Oct 2021 18:49:06 UTC
record: 5
